const { gql } = require("apollo-server-express");


const typeDefs = gql`
  type User {
    _id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String
    createdOrganizations: [Organization]
    joinedOrganizations: [Organization]
    createdEvents: [Event]
    registeredEvents: [Event]
    eventAdmin: [Event]
    adminFor: [Organization]
  }

  type Event {
    _id: ID!
    title:String!
    description: String!
    attendees: String!
    isPublic: Boolean! 
    isRegisterable: Boolean! 
    creator: User!
    registrants: [User]
    admins(adminId: ID): [User]
  }


  type Organization {
    _id: ID!
    name:String!
    description: String!
    isPublic: Boolean! 
    creator: User!
    members: [User]
    admins(adminId: ID): [User]
  }

  input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
  }

  input LoginInput {
    email:String!, 
    password:String!
  }
  
  type AuthData {
    userId: ID!
    token:String!
  }

  type Query {
    users(id: ID): [User],
    login(data: LoginInput!): AuthData!
    organizations(id: ID): [Organization]
    events(id: ID): [Event]
    me:User!
  }

  input OrganizationInput {
    title:String!
    description: String!
    attendees: String
    isPublic: Boolean! 
    isRegisterable: Boolean! 
  }

  input EventInput {
    title:String!
    description: String!
    attendees: String
    isPublic: Boolean! 
    isRegisterable: Boolean! 
  }

  input UpdateOrganizationInput {
    name:String
    description: String
    isPublic: Boolean
  }



  input UserAndOrganizationInput{
    organizationId: ID!, userId: ID!
  }


  type Mutation {
    signUp(data: UserInput!): AuthData!
    createEvent(data: EventInput): Event!
    createOrganization(data: OrganizationInput): Organization!
    updateOrganization(id:ID!, data: UpdateOrganizationInput) : Organization!
    removeOrganization(id: ID!) : Organization!
    createAdmin (data: UserAndOrganizationInput!) : User!
    removeAdmin (data: UserAndOrganizationInput!) : User!
    joinPublicOrganization (organizationId: ID!) : User!
    leaveOrganization (organizationId: ID!) : User!
    removeMember (data: UserAndOrganizationInput!) : User!
  }
`

module.exports = typeDefs