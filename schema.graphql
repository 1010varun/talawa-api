const { gql } = require("apollo-server-express");


const typeDefs = gql`
  type User {
    _id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String
    createdOrganizations: [Organization]
    joinedOrganizations: [Organization]
    adminFor: [Organization]
  }

  type Organization {
    _id: ID!
    name:String!
    description: String!
    isPublic: Boolean! 
    creator: User!
    members: [User]
    admins(adminId: ID): [User]
  }

  input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
  }

  input LoginInput {
    email:String!, 
    password:String!
  }
  
  type AuthData {
    userId: ID!
    token:String!
  }

  type Query {
    users(id: ID): [User],
    login(data: LoginInput!): AuthData!
    organizations(id: ID): [Organization]
    me:User!
    events(id: ID): [Event]
    event(id: ID): Event
  }

  input OrganizationInput {
    name:String!  
    description: String!
    isPublic: Boolean!
  }
  input UpdateOrganizationInput {
    name:String
    description: String
    isPublic: Boolean
  }



  input UserAndOrganizationInput{
    organizationId: ID!, userId: ID!
  }

  type Post {
    _id: ID
    text: String
    createdAt: String
    imageUrl: String
    videoUrl:String
    creator: User
    organization: Organization
    linkedBy: User
    comments: User
  }



  type Event {
    _id: ID!
    organization: Organization!
    title:String!
    description: String!
    recurring: Boolean
    recurrance: String
    attendees: String!
    isPublic: Boolean! 
    isRegisterable: Boolean! 
    creator: User!
    registrants: [User]
    admins(adminId: ID): [User]
  }

  type Message {
    text: String
    createdAt: String
    imageUrl: String
    videoUrl:String
        creator: User
    organization: Organization
  }

  input EventInput {
    title:String!
    description: String!
    recurring: Boolean!
    recurrance: String
    attendees: String
    isPublic: Boolean! 
    isRegisterable: Boolean! 
  }


  type Mutation {
    signUp(data: UserInput!): AuthData!
    createOrganization(data: OrganizationInput): Organization!
    updateOrganization(id:ID!, data: UpdateOrganizationInput) : Organization!
    removeOrganization(id: ID!) : Organization!
    createAdmin (data: UserAndOrganizationInput!) : User!
    removeAdmin (data: UserAndOrganizationInput!) : User!
    joinPublicOrganization (organizationId: ID!) : User!
    leaveOrganization (organizationId: ID!) : User!
    removeMember (data: UserAndOrganizationInput!) : User!

    adminRemovePost(organizationId: ID!, postId:ID!):Post!
    adminRemoveEvent(organizationId: ID!,eventId: ID!): Event!
    adminRemoveGroupChat(organizationId:ID!, groupChatId:ID!):Message!


     createEvent(data: EventInput): Event!

  }
`

module.exports = typeDefs